<h2>Part 1 &amp; 2 The Set Up</h2><h2><p>&nbsp; &nbsp;&nbsp;For me, setting up Telescope was a tricky task, in order to run the backend server I had to learn how Reddis and Elasticsearch&nbsp; worked. I have never used Redis or Elasticsearch. However, after some reading I realized the power behind Elasticsearch, a search engine. After that I learned what Reddis was and got an idea of how they communicated with each other. In addition I had to learn how docker works. Docker sets up a container for your computer's environment. I noticed everything I needed was in the documentation. All hurdles could be solved by sitting down and reading the documentation.</p><div>  <div class="iframe-video-wrapper"><iframe src="https://giphy.com/embed/3o6ozD4FXYQNv5ERjy" loading="lazy"></iframe></div><p><a href="https://giphy.com/gifs/primerstories-check-list-3o6ozD4FXYQNv5ERjy"></a></p></div><p>&nbsp;&nbsp;&nbsp;&nbsp;The <a href="https://www.blogger.com/u/1/blog/post/edit/3618816638550590018/7481655554725518281#">environment-setup.md</a> helped guide me through the journey of setting up my environment. I will admit that it made the setting up process easier, however, the documentation did not explain how the backend was set up thoroughly. The environment was set up but I had no idea how it was all working. It felt like I was trying to figure out a jigsaw puzzle. Maybe updating the setup page could be an issue someone could fix. After setting up the backend, I read the next part of this week's lab. Part 3 and 4 of this lab got me thinking about how I should implement this week's task.</p></h2><h2>LEVEL UP!!! C++ to Python</h2><div><a href="https://1.bp.blogspot.com/-8O18majEa-g/X6ZVRMtFQfI/AAAAAAAAAI0/_K7g0GHviPATZDfpqlgkUwprpQ7M29x9gCLcBGAsYHQ/s750/FullSizeRender.jpeg"><img src="https://1.bp.blogspot.com/-8O18majEa-g/X6ZVRMtFQfI/AAAAAAAAAI0/_K7g0GHviPATZDfpqlgkUwprpQ7M29x9gCLcBGAsYHQ/s200/FullSizeRender.jpeg" loading="lazy"></a></div><p>&nbsp;&nbsp;&nbsp;&nbsp;Due to the requirements of this week's lab and my <a href="https://github.com/jiyoungsin/OSD_A1_Tool">previous project</a>, completing part 3 and 4 was a little challenging. Let me explain why. In the beginning, I thought that this project would be a simple Command line tool that we use and throw away, this was not the case. It is now the seventh week and the Command Line Interface program has a big role in our education. Initially, I thought this would be a quick and easy project. This led me to use bash the scripting language to create a quick solution. However, after implementing new features, I realized it would be better to use a programming language such as Python. I came to this conclusion as Python would allow me to create web API calls much easier than bash.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;This lab ultimately led me to rewriting this code in Python. Writing this code in python would allow me to structure the command line interface in a much more simple way. You can find the new repository here. This refactoring allowed me to remember all the assignments we had accomplished in the past few weeks. This gave me an idea on how to implement this week's tasks.</p><p>	Telescopes REST API was very simple to use, I had no issues integrating my program to the API. Since I rewrote the entire program I used the click library to add our previous options. This library also made accepting arguments simple. My code was a mess and I had to change a lotâ€¦&nbsp;</p><div><br></div><div>  <div class="iframe-video-wrapper"><iframe src="https://giphy.com/embed/lq4VhxXSC2oZdnky9L" loading="lazy"></iframe></div><p><a href="https://giphy.com/gifs/rickandmorty-season-3-adult-swim-rick-and-morty-lq4VhxXSC2oZdnky9L"></a></p></div><div>The next step seems simple. I should edit the <a href="https://github.com/jiyoungsin/Command-line-tool">README.md</a> to match the code created. I would like to understand what exactly what a gist is I have never used a gist before and must do some readings to understand what It is used for. Seems like I will be updating my own documentation.</div><p>We're gonna work on an open-source application called <a href="https://github.com/Seneca-CDOT/telescope">Telescope</a> which is developed and maintained by Seneca College open-source community in the remaining of this semester. This week's lab is a start for students to set up the environment and get familiar with the application.</p>

<p>It took me a while to set up the environment. Thanks to the PRs I did in Hacktoberfest, I'm getting used to facing difficulties while setting up the environment for application development. The first difficulty I encountered was <strong>low disk space</strong>, as I mentioned in the <a href="https://dev.to/yuanleemidori/hacktoberfest-this-is-not-the-end-244g">previous experience using docker</a>, I knew installing docker engine and running dockerized application are going to occupy at least 2&nbsp;GB disk space. It is hard for me to free up the spaces anymore. Therefore, I decided to re-partition my hard drive!</p>

<p>My OS is Linux 19.2 Tina, my disk partitions were 20 GB for <code>/</code> and about 350&nbsp;GB for <code>/home</code>. I planned to shrink the partition of <code>/home</code> and increase the <code>/</code> partition. I was trying to use a GUI tool called GParted. However, I found that I wasn't able to unmount the <code>/home</code> which means I wasn't able to make any changes on that partition including resizing and moving. I searched for similar issues' posts on different forums, and I got the conclusion that I have to be <em>not using any process in /home</em> to unmount the partition. According to those posts on different forums, there should be several ways to achieve it. I've tried some of them, but they did not work. I ended up using <a href="https://gparted.org/liveusb.php">GParted live USB</a>. </p>

<p>The instructions are quite clear. After 3 hours (most of them are waiting time), I finally got my drive re-partitioned and got a bigger partition for <code>/</code>! Hooray!</p>

<p>The rest of setting up environment for Telescope was smooth, the document is quite useful. However, the steps of installing docker might not work on Linux Mint OS. I had this issue while I installed docker by following the steps from the official docker website. I got the solution from some posts in the Linux Mint forum. I'll spend some time to truly figure it out and send the conclusion to the Telescope community and discuss if we should update the document.</p>

<p>The lab for this week is to use the <a href="https://dev.to/yuanleemidori/are-you-a-bad-link-or-a-good-link-fgb">link checker tool</a> with Telescope. Telescope will return the latest 10 posts with their ids and URLs. Our mission is to use the link checker to check these URLs. What I did to achieve the goal were to fetch the data from the localhost, downloading the string and convert it to JSON objects to access the URL properties, and finally, check the links.</p>

<p>Looking forward to working on Telescope in the upcoming weeks! It is impressed that this project was built by previous students in this course. Can't wait to be part of it.</p><p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uijJlxBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/14jzosuo9axnvvl6fzpm.gif"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uijJlxBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/14jzosuo9axnvvl6fzpm.gif" loading="lazy"></a></p>

<h2>
  <a href="#what-is-telescope">
  </a>
  What is Telescope
</h2>

<p><a href="https://github.com/Seneca-CDOT/telescope">Telescope</a> is an example of <a href="https://en.wikipedia.org/wiki/Planet_(software)">planet</a>: a tool for<br>
aggregating blog feeds. It reminds me of google reader which I used for a long time to read the news.</p>
<h2>
  <a href="#setup-environment">
  </a>
  Setup Environment
</h2>

<p>I am working on a fedora33 with KDE Plasma Desktop. Docker still not support CgroupsV2. It takes a little time to install docker and I have written a blog post for the installation <a href="https://dev.to/yzwdroid/fedora-33-docker-445k">https://dev.to/yzwdroid/fedora-33-docker-445k</a>.</p>

<p>For some reason, redis has a permission error when <code>docker-compose</code><br>
</p>

<div>
<pre class="hljs bash"><code>Starting telescope_redis_1        ... <span class="hljs-keyword">done</span> 
Starting telescope_elasticsearch_1 ... <span class="hljs-keyword">done</span> 
Attaching to telescope_redis_1, telescope_elasticsearch_1 
redis_1         | find: <span class="hljs-string">'.'</span>: Permission denied 
redis_1         | chown: changing ownership of <span class="hljs-string">'.'</span>: Permission denied 
telescope_redis_1 exited with code 1 
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>So I installed Redis by <code>sudo dnf install redis</code>, and start it with<br>
<code>redis-server</code></p>

<p>All other part went well, I just follow the <a href="https://github.com/Seneca-CDOT/telescope/blob/master/docs/environment-setup.md">environment-setup.md</a></p>
<h2>
  <a href="#modify-gourl">
  </a>
  Modify goURL
</h2>

<p>To work with the REST API of telescope, I added a new flag <code>-u --url</code>, fetch<br>
the json data, convert the data to a slice of post, get each post's contents by<br>
the url. I just added one new function to make this work. Below is the diff I<br>
made.<br>
</p>

<div>
<pre class="hljs css"><code><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">diff</span> <span class="hljs-selector-tag">HEAD</span> <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span> <span class="hljs-selector-tag">utils</span><span class="hljs-selector-class">.go</span> &amp;<span class="hljs-selector-tag">gt</span>; <span class="hljs-selector-tag">lab6</span><span class="hljs-selector-class">.diff</span>
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>The diff<br>
</p>

<div>
<pre class="hljs go"><code>diff --git c/main.<span class="hljs-keyword">go</span> w/main.<span class="hljs-keyword">go</span>
index <span class="hljs-number">4679</span>a1a..fd3d249 <span class="hljs-number">100644</span>
--- c/main.<span class="hljs-keyword">go</span>
+++ w/main.<span class="hljs-keyword">go</span>
@@ <span class="hljs-number">-25</span>,<span class="hljs-number">6</span> +<span class="hljs-number">25</span>,<span class="hljs-number">7</span> @@ <span class="hljs-keyword">var</span> js = flag.BoolP(<span class="hljs-string">"json"</span>, <span class="hljs-string">"j"</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">"output json format to stdout"</span>)
 <span class="hljs-keyword">var</span> fp = flag.StringP(<span class="hljs-string">"file"</span>, <span class="hljs-string">"f"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"file name to check"</span>)
 <span class="hljs-keyword">var</span> ignore = flag.BoolP(<span class="hljs-string">"ignore"</span>, <span class="hljs-string">"i"</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">"ignore url patterns"</span>)
 <span class="hljs-keyword">var</span> failOnly = flag.Bool(<span class="hljs-string">"fails"</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">"show only urls that failed"</span>)
+<span class="hljs-keyword">var</span> urlFlag = flag.BoolP(<span class="hljs-string">"url"</span>, <span class="hljs-string">"u"</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">"read telescope restful API"</span>)

 <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
    flag.Parse()
@@ <span class="hljs-number">-43</span>,<span class="hljs-number">14</span> +<span class="hljs-number">44</span>,<span class="hljs-number">20</span> @@ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> -v or --version check version.
        os.Exit(<span class="hljs-number">-1</span>)
    }

-   dat, err := ioutil.ReadFile(*fp)
-   check(err)
-
+   <span class="hljs-keyword">var</span> urls []<span class="hljs-keyword">string</span>
+   <span class="hljs-keyword">var</span> dat []<span class="hljs-keyword">byte</span>
+   <span class="hljs-keyword">if</span> *urlFlag {
+       dat = dataTelscope()
+   } <span class="hljs-keyword">else</span> {
+       <span class="hljs-keyword">var</span> err error
+       dat, err = ioutil.ReadFile(*fp)
+       check(err)
+   }
    <span class="hljs-comment">// use xurls tool to exact links from file. Strict mod only match http://</span>
    <span class="hljs-comment">// and https:// schema</span>
    rxStrict := xurls.Strict()
    <span class="hljs-comment">// urls is a slice of strings</span>
-   urls := rxStrict.FindAllString(<span class="hljs-keyword">string</span>(dat), <span class="hljs-number">-1</span>)
+   urls = rxStrict.FindAllString(<span class="hljs-keyword">string</span>(dat), <span class="hljs-number">-1</span>)
    urls = removeDuplicate(urls)

    <span class="hljs-keyword">if</span> *ignore {
diff --git c/utils.<span class="hljs-keyword">go</span> w/utils.<span class="hljs-keyword">go</span>
index <span class="hljs-number">5</span>c27fc7..aee4859 <span class="hljs-number">100644</span>
--- c/utils.<span class="hljs-keyword">go</span>
+++ w/utils.<span class="hljs-keyword">go</span>
@@ <span class="hljs-number">-2</span>,<span class="hljs-number">7</span> +<span class="hljs-number">2</span>,<span class="hljs-number">9</span> @@ <span class="hljs-keyword">package</span> main

 <span class="hljs-keyword">import</span> (
    <span class="hljs-string">"bufio"</span>
+   <span class="hljs-string">"encoding/json"</span>
    <span class="hljs-string">"fmt"</span>
+   <span class="hljs-string">"io/ioutil"</span>
    <span class="hljs-string">"log"</span>
    <span class="hljs-string">"net/http"</span>
    <span class="hljs-string">"os"</span>
@@ <span class="hljs-number">-18</span>,<span class="hljs-number">6</span> +<span class="hljs-number">20</span>,<span class="hljs-number">43</span> @@ <span class="hljs-keyword">type</span> urlStatus <span class="hljs-keyword">struct</span> {
    Status <span class="hljs-keyword">int</span>
 }

+<span class="hljs-keyword">type</span> post <span class="hljs-keyword">struct</span> {
+   ID  <span class="hljs-keyword">string</span>
+   URL <span class="hljs-keyword">string</span>
+}
+
+<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dataTelscope</span><span class="hljs-params">()</span> []<span class="hljs-title">byte</span></span> {
+   <span class="hljs-keyword">var</span> data []<span class="hljs-keyword">byte</span>
+   <span class="hljs-keyword">var</span> posts []post
+   resp, err := http.Get(<span class="hljs-string">"http://localhost:3000/posts"</span>)
+   check(err)
+   <span class="hljs-keyword">defer</span> resp.Body.Close()
+
+   <span class="hljs-keyword">if</span> resp.StatusCode == http.StatusOK {
+       body, err := ioutil.ReadAll(resp.Body)
+       check(err)
+       <span class="hljs-keyword">if</span> err := json.Unmarshal(body, &amp;posts); err != <span class="hljs-literal">nil</span> {
+           <span class="hljs-built_in">panic</span>(err)
+       }
+       <span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> posts {
+           resp, err := http.Get(<span class="hljs-string">"http://localhost:3000"</span> + p.URL)
+           <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
+               fmt.Println(err)
+           }
+           <span class="hljs-keyword">defer</span> resp.Body.Close()
+           <span class="hljs-keyword">if</span> resp.StatusCode == http.StatusOK {
+               bodyData, err := ioutil.ReadAll(resp.Body)
+               <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
+                   fmt.Println(err)
+               }
+               data = <span class="hljs-built_in">append</span>(data, bodyData...)
+           }
+       }
+   }
+
+   <span class="hljs-keyword">return</span> data
+}
+
 <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeDuplicate</span><span class="hljs-params">(urls []<span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">string</span></span> {
    result := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(urls))
    temp := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">struct</span>{}{}
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>The gist version is here <a href="https://gist.github.com/yzwdroid/26b6cb71f75f3799dfccd5fb0ed9ec79">https://gist.github.com/yzwdroid/26b6cb71f75f3799dfccd5fb0ed9ec79</a></p><p>So before I get started on this blog, I must make a quick errata. <a href="https://dev.to/chrispinkney/release-0-2-4-or-these-english-muffins-keep-throwing-stuff-at-me-2ool">My previous PR for 0.2.4</a> was rejected as it failed on a certain recipe. I tested it on several, alas it was not enough. Maybe I could add a testing module to this project down the road. Things to consider for 0.4. Anyway, long story short I went back and <a href="https://github.com/poundifdef/plainoldrecipe/pull/43/commits/29d8b67a99c5ff1eb5aef629e84749d45c7cf271">rewrote the entire PR</a> using the main website's library, as opposed to using a scraper like I was before. Will report back with progress.</p>




<p>Continuing onwards, this week's blog post is about the second portion to assignment 3 (assignment 0.3.2) in my Open Source Development class. 0.3.2 is about continuing my progress as a novice developer to contribute once more to a project of my choosing; so I will return once again to <a href="https://plainoldrecipe.com/">Plain Old Recipe</a>, a website that I love, written in a language that I love. What a combo.</p>

<p>I added three contributions (four if you include the one that I had to fix)- but two of them are nothing: <a href="https://github.com/poundifdef/plainoldrecipe/pull/45">one is an addition to the project's documentation about running it locally</a>, and <a href="https://github.com/poundifdef/plainoldrecipe/pull/47">the other is about autofocusing the URL bar upon page load</a>. They aren't much, I just wanted to add them because they were small. <a href="https://github.com/poundifdef/plainoldrecipe/pull/46">The main contribution is yet another recipe parser</a> which I developed over the course of a day or two... which I... also might have submitted, and which came back as having failed some tests the developer did. I swear, I'm testing this stuff! I just hadn't predicted just how different one recipe could be from the next.</p>

<p><a href="https://github.com/poundifdef/plainoldrecipe/pull/46/commits/61acbb000537e0e2bf91a6ccac13bfe3dddb8f87">My first implementation</a> made use of the website's internal scraping library which relies on BeautifulSoup4, this took me longer than I thought would have been necessary, as scraping a recipe website's list of instructions always proves harder than expected.</p>

<ul>
<li>
<code><div></div></code>

<ul>
<li>Every step</li>
<li>Is linked to another step</li>
<li>So you must first find the main div</li>
<li>then iterate over the entire div's class.</li>
<li>It sounds easy when spelled out like this but every website</li>
<li>handles <code>li</code> children a bit different, which requires</li>
<li>a different method for scraping</li>
</ul>


</li>
<li><code></code></li>
</ul>

<p>However as mentioned, <a href="https://github.com/poundifdef/plainoldrecipe/pull/46#issuecomment-721400737">my first implementation came back</a>. Back to the drawing board. I've always wanted to draw out a system on a whiteboard, don't ask me why. I like to think that system engineering is where I'll end up in my career but we'll see. Something about it really interests me.</p>

<p>However, this time I went back with <a href="https://github.com/poundifdef/plainoldrecipe/pull/46#issuecomment-721400737">a recommendation</a> to try using his internal JSON scraper- something which I'm not very familiar with (JSON, that is). <a href="https://github.com/poundifdef/plainoldrecipe/pull/46/commits/61acbb000537e0e2bf91a6ccac13bfe3dddb8f87">This implementation worked out much better than the previous version did</a>. I'm slowly amassing this weird specialization with the BS4 library (along with basic Python skills.) I particularly enjoy <a href="https://github.com/poundifdef/plainoldrecipe/pull/46/commits/61acbb000537e0e2bf91a6ccac13bfe3dddb8f87#diff-6893fdb529b8a17260bcc5e51aaf7649f782373d7ece9a88b4161e28c5280fd1R23">this elegant method I used</a> to find all the children of an <code>ol</code> tag and iterating over them. The second attempt on this PR has yet to be accepted, and I'm hoping to hear back soon! And yet...</p>

<p>Regardless of how I put in 2 extra "<em>PRs</em>", or had to rework a previous PR, or even how I had to rework <strong>this</strong> PR, I still personally feel like this is not enough. Then I stumbled upon the real meat.</p>

<p>Someone on a previous issue had mentioned a great idea: <a href="https://github.com/poundifdef/plainoldrecipe/issues/17#issuecomment-721413442">a logging system which collects metrics about failed recipe attempts</a>, thus giving the developer new ideas on what websites should be supported in the future. This could be awesome! There could be so much I could iterate on with something like this. That plus having just come back from a <del>four</del> two month co-op using Machine Learning, I'm always down to make pretty graphs or analyze some sort of data. Either way, I'm really excited to hear back from my suggestion on how this could be implemented (with the helpful sage-like wisdom from my Professor, who keenly suggested the idea of using a Google shreadsheet as a "<em>cheaper</em>" alternative to using a database.)</p>




<p>This experience using web technologies is priceless to me, and is exactly what I need as I could use as much web experience as possible for next coming term when I implement my capstone project.</p>

<p>See you next time, hopefully with some good news. This may or may not be the last update to this post, nor the last PR in 0.3. Depends on what happens. Stay tuned!</p><p>Fun Fact: I missed the rebase and squash lab because I was so busy doing release 0.2 and other work in my class that it totally skipped my mine. David, if you're reading this, I hope I can squash any other 0s you give me in the future! :D</p>

<p>In this week's post, we're once again working with our link checker repo. This time, however, we're to make a new option that checks the urls of the last 10 blog posts featured on our school's open source website, Telescope. This means that I had to fork and setup telescope locally, which is totally fine since I have to work on it for release 0.3.</p>

<p>I had alot of trouble setting this thing up. It's to be expected with a code base this huge. I actually had so much trouble, I ended up even making a PR to fix some info in the environment-setup.md docs file that was confusing me. You can read the PR <a href="https://github.com/Seneca-CDOT/telescope/pull/1273">here</a></p>

<p>Eventually, I was able to successfully setup redis and elasticsearch using Docker (A tool I've been wanting to learn for awhile now). It then became a matter of running the backend and the frontend and then Telescope was able to be loaded in locally and successfully</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkoOv8jz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lix4mquf7cfcve73c23l.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkoOv8jz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lix4mquf7cfcve73c23l.png" loading="lazy"></a></p>

<p>The telescope API is interesting with the many request urls and parameter queries you can pass into it. I didn't mess around with it that much and only focused on the required endpoint which was "/posts". </p>

<p>As for the actual link checker code, I didn't have to change much of it. I really only needed to add a new function to my urlClass that makes the request to the localhost url of telescope, deserialize the incoming response, then add the id of each post to the telescope posts url and call my makeRequests function with it</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPOESbxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpovtmcfk96cicf8ntfe.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPOESbxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jpovtmcfk96cicf8ntfe.png" loading="lazy"></a></p>

<p>This was the final result:</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OwU8KNhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zsuj3uf1w9ppim2hwija.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwU8KNhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zsuj3uf1w9ppim2hwija.png" loading="lazy"></a></p>

<p>I also made a gist url that contains the diff result of my git diff, which highlights the changes that I made when I added the telescope feature. You can find that <a href="https://gist.github.com/HyperTHD/544b2900e612b5fbcd674931a4266f6a">here as well</a>!</p>

<p>Overall, I liked this lab. Setting up telescope was a pain, but a necessary one. It also gave me first-hand exposure to tools that I'd like to really work with more often such as Docker, Github Actions, and Gatsby.js. I know we're supposed to rewrite the frontend eventually using Next.js so it won't be long before Gatsby is removed. Surprisingly, many of these new tools are all dev-ops. Perhaps, I'll work more that in the future when I get more free time.</p>

<p>Until next time, everyone! Stay safe!</p><h2>
  <a href="#well-not-much-of-a-break">
  </a>
  Well not much of a break.
</h2>

<p>This week was filled with a couple of firsts. The first week of my new job and the first time using most of the programs introduced this week. It was also the first time I'll be working with <a href="https://telescope.cdot.systems/">Telescope</a> and the first time using git diffs and GitHub Gist. Both of which I'm not terribly sure if I have a full grasp of yet.</p>

<h2>
  <a href="#the-set-up">
  </a>
  The Set Up
</h2>

<p>So for Lab 6, we were meant to set up Seneca's Telescope blog aggregator and to pump the links we get into our <a href="https://github.com/fluentinstroll/Link-Checker">Link Checker</a> apps. At least, we were meant to develop a proof of concept for the feature and upload the <a href="https://gist.github.com/fluentinstroll/5d0e4e40f614bae68a9ebff40e01c210">diff</a> to GitHub Gist.</p>

<p>Seems easy, right? Well, it requires a little more effort than that.</p>

<p>In order to set up Telescope we need 3 things: redis-server, Elasticsearch, and Docker. In order to properly run redis-server, we must also get WSL, a Linux subsystem for Windows.</p>

<p>WSL was a slight pain to get working but now that I have it I think I might use it forever. Running a dual boot system for a while just to develop web apps because so cumbersome that I gave up early last year and just used Windows. But with WSL I can run a Ubuntu terminal in vscode and kill two birds with one stone. The only thing I have to look out for is accidentally having like 5 terminals open at once which... I'm doing right now to gather screenshots for this blog post.</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Am9KlLvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ae4hzvhu0epn00ze6smy.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Am9KlLvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ae4hzvhu0epn00ze6smy.png" loading="lazy"></a></p>

<p>So redis-server is up, next is Elasticsearch. Now, I'm not too sure where I went wrong here but after properly installing Elasticsearch and getting it running properly, as well as verifying that all the ports were the same between them, I just couldn't get Elasticsearch to properly connect with the Telescope backend. This is unfortunate because I'd really like to get it properly working before I take a dive into Telescope for real. However, for just this lab, I was able to set up a limited Elasticsearch server to grab some blog posts from the API and help me with my work.</p>

<p>Finally, Docker. I'm not too sure where Docker fits into everything because I ran everything separately. However, I think I'll try to get it all together in a Docker container for the future as it seems like it'll make development a lot easier. I had an issue with setting up Docker with my WSL that involved having the Hyper-V VM running which made Docker crash. Weird stuff, but after a bit of research, it was easy to fix.</p>

<h2>
  <a href="#a-bit-of-coding">
  </a>
  A bit of coding
</h2>

<p>The objective is this: grab links to blog posts from the Telescope backend API, pipe them into a text file, grab the links from that text file, and finally test them to make sure they're good links like my app already does.</p>

<p>Simple, right?</p>

<p>This is the part where I say no, but actually it is.</p>

<h3>
  <a href="#indexjs-excerpt">
  </a>
  index.js excerpt
</h3>



<div>
<pre class="hljs javascript"><code><span class="hljs-keyword">if</span> (options.t) {

    <span class="hljs-keyword">var</span> url = <span class="hljs-string">'http://localhost:3000/posts/'</span>;

    req.get({
        <span class="hljs-attr">url</span>: url,
        <span class="hljs-attr">json</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">headers</span>: {
            <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'request'</span>
        }
    }, (err, res, data) =&gt; {
        <span class="hljs-keyword">if</span> (err) {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Error:'</span>, err);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.statusCode !== <span class="hljs-number">200</span>) {
            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'localhost did not respond... check to see if your local telescope session is up...'</span>);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">const</span> urls = data.map(e =&gt; url + e.id)

            fs.writeFile(<span class="hljs-string">'files/telescope.txt'</span>, <span class="hljs-built_in">JSON</span>.stringify(urls), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{
                <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;
              }); 
        }
    });
}
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>The above code basically queries the local version of the Telescope API for the post ids, then we just stick the rest of the url to the front of the id, then write it straight into a file. </p>

<h3>
  <a href="#more-indexjs-excerpts">
  </a>
  more index.js excerpts
</h3>



<div>
<pre class="hljs typescript"><code><span class="hljs-keyword">if</span>(options.t){
    filename = <span class="hljs-string">'files/telescope.txt'</span>
}
<span class="hljs-keyword">else</span> {
        filename = <span class="hljs-string">`<span class="hljs-subst">${argv[<span class="hljs-number">2</span>]}</span>`</span>;
}
fs.readFile(filename, (err, fileContents) =&gt; {
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">var</span> linkList = generateLinkList(fileContents);
        linkList = <span class="hljs-built_in">Array</span>.from(linkList);
    } <span class="hljs-keyword">catch</span> (err) {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"The app has recieved a wrong filename."</span>)
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Please enter a correct filename."</span>)
        exit(<span class="hljs-number">1</span>);
    }
    validateLinks(linkList)
})
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>This is also a simple change to the rest of the code, writing an if statement to check if we've used our telescope argument, and setting the file to that if so! Easy.</p>

<p>Frankly, I just had to add some connections to the local API and modify almost nothing else.</p>

<p>I want to be clear that this code is a proof of concept as outline in the Lab 6 instructions, it's not mean to be comprehensive and perfect for every situation (for example, I could have it query a backend API that I host on a Heroku server or something so that I won't have to set up the local server every time to use it), but it works well for what it is. I can't wait to expand upon this feature and fix up the code to be a lot more modular, which I think is going to be my next big refactor.</p>This week, I have started to work with
Telescope.<h3>Lab 6â€Šâ€”â€ŠDPS909</h3><p>Interacting with Telescope</p><p>This week I had the chance to interact with the <a href="https://github.com/Seneca-CDOT/telescope">Telescope</a> project. The installation process and setting up the environment went pretty well. This is due to the experience I had in the previous month installing the Mattermost server.</p><p>The task for this week was to pull the posts from Telescope API and check the links inside of these posts by using our <a href="https://github.com/egrinberg/Utest/">URL link checker</a>. I decided to create a function that sends a request to the local server which returns a JSON object with postsâ€™ ids and URLs. Then I extracted all the posts ids and store them in the array. Then I iterate through the array of ids and called another function called writePostToFile with the id parameter.</p><pre>const writePostToFile = async (post,id) =&gt; {</pre><pre>fetch(post)</pre><pre>.then(</pre><pre>res =&gt;</pre><pre>new Promise((resolve, reject) =&gt; {</pre><pre>const path = `./telescope/posts/${id}`;</pre><pre>const dest = fs.createWriteStream(path);</pre><pre>res.body.pipe(dest);</pre><pre>res.body.on("end", () =&gt; resolve(path));</pre><pre>dest.on("error", reject);</pre><pre>})</pre><pre>)</pre><pre>.then(path =&gt; {</pre><pre>console.log(path);</pre><pre>let p = `${path}`;</pre><pre>fileHandler.processFile(p);</pre><pre>});</pre><p>This function sends a request to the local server with the specified post id, retrieves the text of the post and creates a new file with the postâ€™s content. When the file is created it passes the file to the processFile function.</p><pre>const processFile =  (filename,json) =&gt; {</pre><pre>// Create stream with the file</pre><pre>let s = fs.createReadStream(filename);</pre><pre>return new Promise((resolve, reject) =&gt; {</pre><pre>s.on("data", (buf) =&gt; {</pre><pre>// Get all the URL links from the file</pre><pre>urlList = buf</pre><pre>.toString()</pre><pre>.match(/(http|https)(:\/\/)([\w+\-&amp;@`~#$%^*.=/?:]+)/gi);</pre><pre>// console.log(`${filename} ${urlList}`)</pre><pre>});<br></pre><pre>s.on("end", async () =&gt; {</pre><pre>var responseStatusByUrl = [];</pre><pre>var statusResponseForUrl;</pre><pre>//Iterate through the links and check their status</pre><pre>await Promise.all(</pre><pre>urlList.map(async (url) =&gt; {</pre><pre>try {</pre><pre>const urlTest = await fetch(url, { method: "head", timeout: 1500 });</pre><pre>statusResponseForUrl = { url: `${url}`, status: `${urlTest.status}` };</pre><pre>responseStatusByUrl.push(statusResponseForUrl);</pre><pre>} catch (error) {</pre><pre>statusResponseForUrl = { url: `${url}`, status: "UNKNOWN" };</pre><pre>responseStatusByUrl.push(statusResponseForUrl);</pre><pre>}</pre><pre>})</pre><pre>);</pre><pre>if (json) {</pre><pre>console.log(JSON.stringify(responseStatusByUrl));</pre><pre>} else {</pre><pre>printResponse(responseStatusByUrl);</pre><pre>}</pre><pre>process.exit(checkStatus(responseStatusByUrl));</pre><pre>});</pre><pre>s.on("error",error =&gt; reject(error));</pre><pre>});<br>}</pre><p>This function receives a file, extracts all the URLs, and checks all the URLs statuses.</p><p>The only issue I had while writing the code is the use of Promises which I am sure can be improved in my code. Hope to fix it in the&nbsp;future.</p><p>Commit of this workâ€Šâ€”â€Š-&gt; <a href="https://github.com/egrinberg/Utest/commit/5b3e1090c1dd85debcc35b400ecc33321536c6b7">Lab&nbsp;6</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=11767c605e33" loading="lazy">Lab 6 is about adding an argument to check links in Telescope's recent 10 posts to the link checker command-line tool named url-fi which I created. The instruction of lab 6 is the following:&nbsp;&nbsp;<a href="https://github.com/Seneca-CDOT/topics-in-open-source-2020/wiki/lab-6">https://github.com/Seneca-CDOT/topics-in-open-source-2020/wiki/lab-6</a><div><div><br></div><div>The website named Telescope is an open-source web server and client application for aggregating and presenting a timeline of Seneca's open-source blogs. The way of setting up the Telescope and the GitHub repository links are the following:<br><div>Telescope GitHub repository:&nbsp;<a href="https://github.com/Seneca-CDOT/telescope">https://github.com/Seneca-CDOT/telescope</a></div><div>CONTRIBUTING guide:&nbsp;<a href="https://github.com/Seneca-CDOT/telescope/blob/master/docs/CONTRIBUTING.md">https://github.com/Seneca-CDOT/telescope/blob/master/docs/CONTRIBUTING.md</a></div><div>Environment Setup guide:&nbsp;<a href="https://github.com/Seneca-CDOT/telescope/blob/master/docs/environment-setup.md">https://github.com/Seneca-CDOT/telescope/blob/master/docs/environment-setup.md</a></div><div><br></div><div>After I set up the Telescope and can run it locally, I started improving my command-line tool by putting additional argument options. As way I can get the recent I used the way to get the recent Telescope 10 blogs is using the link "localhost:3000/posts" which gives the JSON format information about the link, I write some code to interact with the local Telescope server and get post links. There are representatively three parts I add my code to implement the feature.</div></div></div><div><br></div><div>First, I added const variable named telescopeUrl which is the link I can get the recent 10 Telecope blogs.</div><div><div><div>//telescope&nbsp;url</div><div>const&nbsp;telescopeUrl&nbsp;=&nbsp;"http://localhost:3000/posts";</div></div></div><div><br></div><div><div>Second, I created the function named checkTelescopePosts. It uses the variable named telescopeUrl to get the JSON file from the link. It checks all the links in the JSON file and displays the results of the URLs checking.</div><div><div><div>//&nbsp;Check&nbsp;telescope's&nbsp;recent&nbsp;10&nbsp;posts&nbsp;link</div><div>function&nbsp;checkTelescopePosts()&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;request(</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;telescopeUrl</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;function&nbsp;(err,&nbsp;res,&nbsp;body)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;postIds&nbsp;=&nbsp;JSON.parse(body);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(let&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;postIds.length;&nbsp;i++)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;postUrl&nbsp;=&nbsp;`${telescopeUrl}/${postIds[i].id}`;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkUrl(postUrl);</div><br><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(sFlag)&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkUrl(postUrl.replace(/^http/,&nbsp;"https"));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</div><div>}</div></div></div><div><br></div></div><div>Third, in the for loop I created to check the arguments, I added checking 't' argument part. When the user runs the tool with the argument t, it goes to the function named checkTelescopPosts.</div><div><div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(arg.includes("t"))&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tFlag&nbsp;=&nbsp;true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkTelescopePosts();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div></div></div><div><br></div><div>This is the output of my link checker when I run 'url-fi -t'.</div><div><div><a href="https://1.bp.blogspot.com/-fcX5uRrrhhI/X6TeDL1NC0I/AAAAAAAAA0c/QP9GW7jr2E8bTj5A2RPXvIZr_PaJitAXQCNcBGAsYHQ/s491/lab6%2B-%2Boutput.JPG"><img src="https://1.bp.blogspot.com/-fcX5uRrrhhI/X6TeDL1NC0I/AAAAAAAAA0c/QP9GW7jr2E8bTj5A2RPXvIZr_PaJitAXQCNcBGAsYHQ/w400-h186/lab6%2B-%2Boutput.JPG" loading="lazy"></a></div><br></div><div>There are additional coding parts I wrote to implement the feature such as creating t flag. You can check the detailed code changes looking at the gist I created for the lab6:&nbsp;&nbsp;<a href="https://gist.github.com/hyunjiLeeTech/89f4f8b97bdd66c1e814b0fb7dc3d9c0">https://gist.github.com/hyunjiLeeTech/89f4f8b97bdd66c1e814b0fb7dc3d9c0</a></div><div><br></div><div>While I am working on the lab6, I realized it would be better to move my functions to the bottom and move the main functions to the top. So I created commits to improve the maintenance. Also, I added more comments about my code:&nbsp;</div><div><ul><li><a href="https://github.com/hyunjiLeeTech/URL-FI/commit/af0cfe543c49ce05e3d6143c2188cbf387930baf">https://github.com/hyunjiLeeTech/URL-FI/commit/af0cfe543c49ce05e3d6143c2188cbf387930baf</a></li><li><a href="https://github.com/hyunjiLeeTech/URL-FI/commit/d85de2f0bc37350c8f5a7d8f27350d83daaa0392">https://github.com/hyunjiLeeTech/URL-FI/commit/d85de2f0bc37350c8f5a7d8f27350d83daaa0392</a></li></ul></div><div><br></div><div>The most difficult part of this lab was set up the Telescope. As the Telescope has some prerequisites such as Redis and Elasticsearch which I had not used before, I needed to install them and learn how to use docker, how to install Ubuntu. It was an interesting challenge but it takes the most time for my lab6. After I finish preparing the prerequisites, I ran the Telescope. Working with Telescope REST API itself was okay and modifying my link checker with the data from Telescope does not need lots of change. I just need to apply the way I've already written. I think my code is in good shape to accomplish and I feel I am ready to challenge a more complicated one.</div><p>Because your web code is as clean as 8 year olds at day care. That's why. I really should have invested in a hand sanitizer company back in April. I wonder how well they're doing.</p>

<p>Anyway, as part of my continual blogging as part of my Open Source Development course, this week I'm going to discuss a PR constructed for our class project <a href="https://telescope.cdot.systems/">Telescope</a>. As part of our third assignment, we're required to contribute to a repo of our choosing, and some sort of contribution to Telescope. </p>

<blockquote>
<p><em>Telescope is an open source web server and client application for aggregating and presenting a timeline of Seneca's open source blogs. Telescope makes it easy to see what's happening with open source at Seneca right now.</em></p>
</blockquote>

<p>My JavaScript is near nonexistent but I really enjoy working with web technologies. Because of this week was hectic, confusing, yet also very exciting.</p>

<p>I'd really like to contribute towards the back end but my front end skills work really needs work. It was either this or contribute towards writing front end testing- which is on hold right now since we're <a href="https://dev.to/chrispinkney/release-0-2-3-or-pivoting-by-a-beautiful-little-fool-378g">pivoting to next.js</a>. <strong>Nonetheless, I decided to jump right into <a href="https://github.com/Seneca-CDOT/telescope/issues/1266">an issue that affected the User eXperience</a>, and as a bonus, an issue partially based on something that really excites me- <em>security</em>!</strong> This issue revolves around how an image (specifically, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs">a particular type of image</a>) wasn't being loaded, and it was because of this that I found this issue so interesting:</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BlA8IL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/427398/97818088-52703e00-1c6e-11eb-88e1-5c4666e583c8.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BlA8IL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/427398/97818088-52703e00-1c6e-11eb-88e1-5c4666e583c8.png" loading="lazy"></a><br>
Telescope had scraped the original post, but not the <code><img></code> tag. What gives? Time to get my magnifying glass and deerstalker hat... like a nerdier Sherlock Holmes.</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4OKDm11S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uds58rhcq4zmy4gxjuwj.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OKDm11S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uds58rhcq4zmy4gxjuwj.png" loading="lazy"></a></p>

<p>My first step was to explore Telescope and find out how it works, what makes it tick, maybe it enjoys long walks on the beach, or maybe a big it spends its free time dreaming of electric sheep 'neath the clouds. I got a hint from the issue post on GitHub that the <a href="https://github.com/apostrophecms/sanitize-html">Sanitizer</a> used with the project's parser likely the culprit. I dug around until I found the sanitizer module, then spent some time reading about how it works. I also spent an embarrassingly long amount of time reading about html tags and attributes... it's been a while. Finally I spent some time reading about how <code>data:</code> URIs work.</p>

<p>Once I oriented myself I spun up my local copy of the project, and got to work. My second step was to hunt down exactly what is and is not being accepted to the database when parsing a blog post. <strong>I decided that I should first determine if changing this file actually does anything, i.e. if I was even on the right track.</strong> I decided to (<em>hilariously</em>) tell the sanitizer to restrict <strong>all</strong> html tags.</p>

<p><em>Injecting a hilarious side note here, this is when I discovered that <code>dev.to</code> will block assets if hit enough times. You see, right when I decided to restrict all tags, the entire time I was making hits to a specific blog post that I wrote that had an image on it. I made my change and refreshed. And look! My image is gone! Great! Wait... wtf? Why are other people's images appearing still then? Furthermore, why does my post still have tags? Turns out <code>dev.to</code> uh... blocked my image from loading (it wasn't loading the actual Telescope site too.) Haha very funny guys. Just another thing I learned I guess. Anyway.</em></p>

<p>Each post should just be plaintext at this point right? Right! Well, no. I made a bunch of changes and turns out once a post is indexed to the database, it is how it is and forever shall be, sanitized tags et al. I noticed this behaviour when a conveniently timed post was indexed for the first time, and was just in plaintext. Perfect, I'm on the right track. Now I just have to reverse my changes and figure out how to unblock these types of images.</p>

<p>I went back to the sanitizers documentation and found what I needed:<br>
</p>

<div>
<pre class="hljs css"><code><span class="hljs-selector-tag">allowedSchemesByTag</span>: { <span class="hljs-attribute">img</span>: [<span class="hljs-string">'data'</span>] },
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>This simple one-line change enabled <code>img</code> tags that have a <code>data</code> scheme to be allowed. So... how do I test that this works? I asked around and my wonderful professor suggested, in much nicer words, that I stop wasting my time and instead write a unit test for this fix to see if an image with a <code>data</code> scheme was being received as expected. Good idea! And I also get to finally write a test! Something I've been tortured with for the last 2 years is now my own power. And here it is:</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekjw3_Un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/luk752e3n5honr12dr4x.png"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekjw3_Un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/luk752e3n5honr12dr4x.png" loading="lazy"></a><br>
(Sorry for the image, dev.to isn't letting me post this code in a code block.)</p>

<p>This is essentially just saying "I want this line of code to look the same when it comes out the other end of the sanitizer." And it did! I also made sure of this by modifying the test to see if it would break, and I made sure to reverse the changes made on the sanitizer to see if it would be blocked as expected, and it was! Success! Or... was it?</p>

<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0K7eaRAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/0495476ec262254ab968676f05ce1b0a/tenor.gif%3Fitemid%3D9251847"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0K7eaRAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/0495476ec262254ab968676f05ce1b0a/tenor.gif%3Fitemid%3D9251847" loading="lazy"></a><br>
It was then that I realized the hubris and greed of my ways. Why on Earth was my new addition causing other tests to fail?? I stumbled on this issue for an hour or so until I noticed the problem. Maybe you'll notice it faster than me:<br>
</p>

<div>
<pre class="hljs css"><code><span class="hljs-selector-tag">allowedSchemesByTag</span>: { <span class="hljs-attribute">img</span>: [<span class="hljs-string">'data'</span>] },
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>See that's the thing about programming. Computers do exactly as instructed. I just hadn't told it the right schemes to allow... <em>sigh</em>.<br>
</p>

<div>
<pre class="hljs css"><code><span class="hljs-selector-tag">allowedSchemesByTag</span>: { <span class="hljs-attribute">img</span>: [<span class="hljs-string">'http'</span>, <span class="hljs-string">'https'</span>, <span class="hljs-string">'data'</span>] },
</code></pre>
<div>
<div>
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<p>Gee I wonder why all the images were being blocked. Hmm.</p>

<p>With the fix in place, and my tests written, it was time to <code>git rebase</code>, <code>push</code>, and comment.</p>

<p><a href="https://github.com/Seneca-CDOT/telescope/pull/1282">Here is the final PR</a> for the Telescope portion of this assignment.</p>




<p>Overall I'm feeling really... well, okayish about this PR (and everything, really). I look around and see some <a href="https://github.com/Seneca-CDOT/telescope/pull/1274">really great</a> <a href="https://github.com/Seneca-CDOT/telescope/pull/1281">PRs by other students</a>. Why can't I be that good? Why can't I code this well? Well, in time maybe. Sucking at something is the first step towards not sucking at something. At least I always tell myself that. What a sucker I am.</p>